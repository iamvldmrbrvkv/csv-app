const fs = require('fs');

const cities = ['–ú–æ—Å–∫–≤–∞', '–°–∞–Ω–∫—Ç-–ü–µ—Ç–µ—Ä–±—É—Ä–≥', '–ù–æ–≤–æ—Å–∏–±–∏—Ä—Å–∫', '–ï–∫–∞—Ç–µ—Ä–∏–Ω–±—É—Ä–≥', '–ö–∞–∑–∞–Ω—å', '–ù–∏–∂–Ω–∏–π –ù–æ–≤–≥–æ—Ä–æ–¥', '–ß–µ–ª—è–±–∏–Ω—Å–∫', '–°–∞–º–∞—Ä–∞', '–û–º—Å–∫', '–†–æ—Å—Ç–æ–≤-–Ω–∞-–î–æ–Ω—É', '–£—Ñ–∞', '–ö—Ä–∞—Å–Ω–æ—è—Ä—Å–∫', '–í–æ—Ä–æ–Ω–µ–∂', '–ü–µ—Ä–º—å', '–í–æ–ª–≥–æ–≥—Ä–∞–¥'];
const occupations = ['–ü—Ä–æ–≥—Ä–∞–º–º–∏—Å—Ç', '–ú–µ–Ω–µ–¥–∂–µ—Ä –ø—Ä–æ–µ–∫—Ç–∞', '–î–∏–∑–∞–π–Ω–µ—Ä', '–ê–Ω–∞–ª–∏—Ç–∏–∫ –¥–∞–Ω–Ω—ã—Ö', 'DevOps –∏–Ω–∂–µ–Ω–µ—Ä', '–ú–∞—Ä–∫–µ—Ç–æ–ª–æ–≥', 'HR –º–µ–Ω–µ–¥–∂–µ—Ä', 'Frontend —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫', 'Backend —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫', '–¢–µ—Å—Ç–∏—Ä–æ–≤—â–∏–∫', '–°–∏—Å—Ç–µ–º–Ω—ã–π –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä', '–ê—Ä—Ö–∏—Ç–µ–∫—Ç–æ—Ä –ü–û'];
const departments = ['–†–∞–∑—Ä–∞–±–æ—Ç–∫–∞', '–ü—Ä–æ–¥—É–∫—Ç', '–î–∏–∑–∞–π–Ω', '–ê–Ω–∞–ª–∏—Ç–∏–∫–∞', '–û–ø–µ—Ä–∞—Ü–∏–∏', '–ú–∞—Ä–∫–µ—Ç–∏–Ω–≥', 'HR', '–ü–æ–¥–¥–µ—Ä–∂–∫–∞'];
const firstNames = ['–ê–ª–µ–∫—Å–∞–Ω–¥—Ä', '–î–º–∏—Ç—Ä–∏–π', '–ú–∞–∫—Å–∏–º', '–°–µ—Ä–≥–µ–π', '–ê–Ω–¥—Ä–µ–π', '–ê–ª–µ–∫—Å–µ–π', '–ê—Ä—Ç—ë–º', '–ò–ª—å—è', '–ö–∏—Ä–∏–ª–ª', '–ú–∏—Ö–∞–∏–ª', '–ê–Ω–Ω–∞', '–ú–∞—Ä–∏—è', '–ï–ª–µ–Ω–∞', '–û–ª—å–≥–∞', '–¢–∞—Ç—å—è–Ω–∞', '–ù–∞—Ç–∞–ª—å—è', '–ò—Ä–∏–Ω–∞', '–ï–∫–∞—Ç–µ—Ä–∏–Ω–∞', '–Æ–ª–∏—è', '–°–≤–µ—Ç–ª–∞–Ω–∞'];
const lastNames = ['–ò–≤–∞–Ω–æ–≤', '–°–º–∏—Ä–Ω–æ–≤', '–ö—É–∑–Ω–µ—Ü–æ–≤', '–ü–æ–ø–æ–≤', '–í–∞—Å–∏–ª—å–µ–≤', '–ü–µ—Ç—Ä–æ–≤', '–°–æ–∫–æ–ª–æ–≤', '–ú–∏—Ö–∞–π–ª–æ–≤', '–ù–æ–≤–∏–∫–æ–≤', '–§—ë–¥–æ—Ä–æ–≤', '–ú–æ—Ä–æ–∑–æ–≤', '–í–æ–ª–∫–æ–≤', '–ê–ª–µ–∫—Å–µ–µ–≤', '–õ–µ–±–µ–¥–µ–≤', '–°–µ–º—ë–Ω–æ–≤'];

function generateCSV(rowCount, filename) {
  return new Promise((resolve) => {
    console.log(`\nüìù –ì–µ–Ω–µ—Ä–∏—Ä—É—é ${filename} —Å ${rowCount.toLocaleString('ru-RU')} —Å—Ç—Ä–æ–∫–∞–º–∏...`);
    const startTime = Date.now();
    
    const stream = fs.createWriteStream(filename);
    stream.write('id,–∏–º—è,email,–≤–æ–∑—Ä–∞—Å—Ç,–≥–æ—Ä–æ–¥,–¥–æ–ª–∂–Ω–æ—Å—Ç—å,–∑–∞—Ä–ø–ª–∞—Ç–∞,–æ—Ç–¥–µ–ª,–¥–∞—Ç–∞_–ø—Ä–∏–µ–º–∞\n');
    
    for (let i = 1; i <= rowCount; i++) {
    const firstName = firstNames[Math.floor(Math.random() * firstNames.length)];
    const lastName = lastNames[Math.floor(Math.random() * lastNames.length)];
    const name = `${firstName} ${lastName}`;
    const email = `${transliterate(firstName)}.${transliterate(lastName)}${i}@example.com`;
      const age = 22 + Math.floor(Math.random() * 40);
      const city = cities[Math.floor(Math.random() * cities.length)];
      const occupation = occupations[Math.floor(Math.random() * occupations.length)];
      const salary = 60000 + Math.floor(Math.random() * 190000);
      const department = departments[Math.floor(Math.random() * departments.length)];
      const year = 2017 + Math.floor(Math.random() * 8);
      const month = String(1 + Math.floor(Math.random() * 12)).padStart(2, '0');
      const day = String(1 + Math.floor(Math.random() * 28)).padStart(2, '0');
      const joinDate = `${year}-${month}-${day}`;
      
      stream.write(`${i},${name},${email},${age},${city},${occupation},${salary},${department},${joinDate}\n`);
      
      // Progress indicator
      if (i % 10000 === 0) {
        process.stdout.write(`\r   –ü—Ä–æ–≥—Ä–µ—Å—Å: ${i.toLocaleString('ru-RU')} / ${rowCount.toLocaleString('ru-RU')} —Å—Ç—Ä–æ–∫ (${Math.round(i/rowCount*100)}%)`);
      }
    }
    
    stream.end(() => {
      const endTime = Date.now();
      const duration = ((endTime - startTime) / 1000).toFixed(2);
      const fileSize = fs.statSync(filename).size;
      const fileSizeMB = (fileSize / 1024 / 1024).toFixed(2);
      
      console.log(`\n‚úÖ –°–æ–∑–¥–∞–Ω ${filename}`);
      console.log(`   –†–∞–∑–º–µ—Ä: ${fileSizeMB} –ú–ë`);
      console.log(`   –í—Ä–µ–º—è: ${duration}—Å\n`);
      resolve();
    });
  });
}

// –¢—Ä–∞–Ω—Å–ª–∏—Ç–µ—Ä–∞—Ü–∏—è –¥–ª—è email
function transliterate(text) {
  // –°–Ω–∞—á–∞–ª–∞ —É–¥–∞–ª—è–µ–º –≤—Å–µ –º—è–≥–∫–∏–µ –∏ —Ç–≤—ë—Ä–¥—ã–µ –∑–Ω–∞–∫–∏, –∑–∞—Ç–µ–º –ø—Ä–∏–≤–æ–¥–∏–º –∫ –Ω–∏–∂–Ω–µ–º—É —Ä–µ–≥–∏—Å—Ç—Ä—É
  const cleanText = text.replace(/[—å–¨—ä–™]/g, '').toLowerCase();
  
  const map = {
    '–∞': 'a', '–±': 'b', '–≤': 'v', '–≥': 'g', '–¥': 'd', '–µ': 'e', '—ë': 'yo', '–∂': 'zh', '–∑': 'z',
    '–∏': 'i', '–π': 'y', '–∫': 'k', '–ª': 'l', '–º': 'm', '–Ω': 'n', '–æ': 'o', '–ø': 'p', '—Ä': 'r',
    '—Å': 's', '—Ç': 't', '—É': 'u', '—Ñ': 'f', '—Ö': 'kh', '—Ü': 'ts', '—á': 'ch', '—à': 'sh', '—â': 'shch',
    '—ã': 'y', '—ç': 'e', '—é': 'yu', '—è': 'ya'
  };
  
  return cleanText.split('').map(char => map[char] || char).join('');
}

// –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Ñ–∞–π–ª—ã –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ
(async () => {
  // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º 100,000 —Å—Ç—Ä–æ–∫ (~15 –ú–ë)
  await generateCSV(100000, 'test-data-100k.csv');
  
  // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º 1,000,000 —Å—Ç—Ä–æ–∫ (~150 –ú–ë)
  await generateCSV(1000000, 'test-data-1m.csv');
  
  console.log('üéâ –ì–æ—Ç–æ–≤–æ!');
})();
